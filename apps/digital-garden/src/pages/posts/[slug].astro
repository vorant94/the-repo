---
import { getCollection, getEntries, render } from "astro:content";
import RelatedPosts from "@/components/RelatedPosts.astro";
import Tag from "@/components/Tag.astro";
import Caption from "@/components/ui/Caption.astro";
import Text from "@/components/ui/Text.astro";
import ThemedImage from "@/components/ui/ThemedImage.astro";
import Title from "@/components/ui/Title.astro";
import { publishedAtFormat } from "@/globals/published-at-format";
import DefaultLayout from "@/layouts/DefaultLayout.astro";
import type { PostModel } from "@/utils/content.helpers";
import { isPostWithCover } from "@/utils/content.helpers";
import { format } from "date-fns";

export async function getStaticPaths() {
  const posts = await getCollection("posts");

  return posts.map((post) => ({
    params: { slug: post.id },
    props: { post },
  }));
}

export interface Props {
  post: PostModel;
}

const { post } = Astro.props;

const postTags = await getEntries(post.data.tags);

const { Content, remarkPluginFrontmatter } = await render(post);
---

<DefaultLayout
	title={post.data.title}
	description={post.data.description}
	image={isPostWithCover(post) ? post.data.coverImage : undefined}
	type="article"
>
	<div class="flex flex-col gap-6">
		{isPostWithCover(post) && (
			<div class="self-center">
				<ThemedImage
					transition:name={`post.${post.id}.coverImage`}
					src={post.data.coverImage}
					srcDark={post.data.coverImageDark}
					alt={post.data.coverAlt}
				/>
			</div>
		)}

		<Title
			as="h1"
			transition:name={`post.${post.id}.title`}
		>
			{post.data.title}
		</Title>

		<div class="flex flex-col justify-between gap-2 lg:flex-row lg:items-center">
			<div class="flex items-center gap-2">
				<Caption transition:name={`post.${post.id}.publishedAt`}>
					{format(post.data.publishedAt, publishedAtFormat.full)}
				</Caption>
				<Caption>&#x2022;</Caption>
				<Caption>{remarkPluginFrontmatter.minutesRead}</Caption>
			</div>

			<menu class="m-0 flex list-none gap-1 p-0">
				{postTags.map((tag) => (
					<li class="m-0 p-0">
						<Tag tag={tag} />
					</li>
				))}
			</menu>
		</div>

		<Text as="em">{post.data.description}</Text>

		{post.data.codeUrl && (
			<p>
				All the code mentioned in the post can be found in my
				<a
					href={post.data.codeUrl}
					target="_blank"
					rel="noreferrer"
				>
					GitHub
				</a>
			</p>
		)}
	</div>

	<article class="prose dark:prose-invert prose-img:mx-auto mt-6">
		<Content/>
	</article>

	{!!post.data.related?.length && <RelatedPosts post={post} />}

	<!-- TODO fork and fix bug of fist reaction -->
	<giscus-widget
		id="comments"
		repo="vorant94/digital-garden"
		repoid="R_kgDOKWcyPw="
		category="Posts"
		categoryid="DIC_kwDOKWcyP84Cc9LF"
		mapping="specific"
		term={post.id}
		reactionsenabled="1"
		emitmetadata="0"
		inputposition="bottom"
		theme="preferred_color_scheme"
		lang="en"
		loading="lazy"
	/>
</DefaultLayout>

<script>
	import 'giscus';
</script>
