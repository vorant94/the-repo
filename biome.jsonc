{
  "$schema": "https://biomejs.dev/schemas/2.0.6/schema.json",
  "linter": {
    "rules": {
      "correctness": {
        "noUnusedImports": "error",
        "noUnusedVariables": "error",
        "noUnusedPrivateClassMembers": "error",
        "useHookAtTopLevel": "error",
        "useExhaustiveDependencies": {
          "level": "error",
          "options": {
            "hooks": [
              {
                "name": "useLiveQuery", // react-dexie
                "closureIndex": 0,
                "dependenciesIndex": 1
              }
            ]
          }
        }
      },
      "nursery": {
        "useSortedClasses": {
          "level": "error",
          "options": {
            "attributes": ["className"], // react
            "functions": ["cn"] // shared/ui/cn.ts
          }
        }
      },
      "performance": {
        "noBarrelFile": "error",
        "noNamespaceImport": "error"
      },
      "style": {
        "noDefaultExport": "error",
        "noNamespace": "error",
        "noNegationElse": "error",
        "useBlockStatements": "error",
        "useCollapsedElseIf": "error",
        "useConsistentArrayType": {
          "level": "error",
          "options": {
            "syntax": "generic"
          }
        },
        "useFilenamingConvention": {
          "level": "error",
          "options": {
            "requireAscii": true,
            "filenameCases": ["kebab-case"]
          }
        },
        "useForOf": "error",
        "useFragmentSyntax": "error",
        "useNamingConvention": "error",
        "useShorthandAssign": "error",
        "noParameterAssign": "error",
        "useAsConstAssertion": "error",
        "useDefaultParameterLast": "error",
        "useEnumInitializers": "error",
        "useSelfClosingElements": "error",
        "useSingleVarDeclarator": "error",
        "noUnusedTemplateLiteral": "error",
        "useNumberNamespace": "error",
        "noInferrableTypes": "error",
        "noUselessElse": "error",
        "useArrayLiterals": "error"
      },
      "suspicious": {
        "useAwait": "error",
        "noConstEnum": "error",
        "noConsole": {
          "level": "error",
          "options": { "allow": ["error", "info", "debug"] }
        }
      }
    }
  },
  "formatter": {
    "attributePosition": "multiline",
    "indentStyle": "space"
  },
  "files": {
    "includes": [
      "**",
      "!**/.DS_Store",
      "!**/.idea",
      "!**/node_modules",
      "!**/dist",
      "!**/coverage",
      "!**/playwright-report",
      "!**/test-results",
      "!**/.env",
      "!**/.wrangler",
      "!**/.vercel",
      "!**/data",
      "!**/.obsidian",
      "!**/.astro",
      "!**/.vscode",
      "!**/.husky/_",
      "!**/build",
      "!**/out",
      "!**/.turbo"
    ]
  },
  "overrides": [
    {
      "includes": ["**/*.config.ts", "**/*.config.mjs", "**/src/main.ts"],
      "linter": {
        "rules": {
          "style": {
            "noDefaultExport": "off"
          }
        }
      }
    },
    {
      "includes": ["**/*.spec.ts", "**/*.spec.tsx"], // because in order to mock top-level function, the test suite should import the whole ESModule
      "linter": {
        "rules": {
          "performance": {
            "noNamespaceImport": "off"
          }
        }
      }
    },
    {
      "includes": ["**/tsconfig.json", "**/tsconfig.*.json"], // its really JSONC/JSON5 format despite the name
      "json": {
        "parser": {
          "allowComments": true
        }
      }
    },
    {
      "includes": ["**/package.json"], // because NPM CLI doesn't preserve format and put new lines where it shouldn't by formatter definitions, so the only option is to obey to NPM
      "formatter": {
        "lineWidth": 1
      }
    },
    {
      "includes": ["**/*.astro"],
      "linter": {
        "rules": {
          "correctness": {
            "noUnusedImports": "off", // Biome doesn't fully support .astro files, hence falsely consider imports used in templates to be unused
            "noUnusedVariables": "off" // Biome doesn't fully support .astro files, hence falsely consider variables used in templates to be unused
          },
          "style": {
            "useFilenamingConvention": "off" // Astro locks in file naming style as part of the framework
          }
        }
      }
    },
    {
      "includes": ["**/libs/**/*/src/index.ts"],
      "linter": {
        "rules": {
          "performance": {
            "noBarrelFile": "off" // these index.ts are entry points for libraries, so it's OK for them to have barrel exports
          }
        }
      }
    }
  ]
}
